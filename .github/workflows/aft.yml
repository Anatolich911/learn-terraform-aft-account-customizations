name: AFT Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    permissions: 
      id-token: write
      contents: read
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::509399597335:role/AFT
          aws-region: us-east-2

      # - name: Install jq and dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y jq python3-pip unzip

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: '3.x'  # Specify the Python version

      # - name: Install dependencies (Jinja2)
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install jinja2-cli

      # - name: Retrieve Parameters from SSM
      #   id: ssm-parameters
      #   run: |
      #     TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
      #     echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          
      #     AWS_MODULE_SOURCE=$(aws ssm get-parameter --name "/aft/config/aft-pipeline-code-source/repo-url" --query "Parameter.Value" --output text)
      #     echo "AWS_MODULE_SOURCE=${AWS_MODULE_SOURCE}" >> $GITHUB_ENV

      #     AWS_MODULE_GIT_REF=$(aws ssm get-parameter --name "/aft/config/aft-pipeline-code-source/repo-git-ref" --query "Parameter.Value" --output text)
      #     echo "AWS_MODULE_GIT_REF=${AWS_MODULE_GIT_REF}" >> $GITHUB_ENV

      #     TF_VERSION=$(aws ssm get-parameter --name "/aft/config/terraform/version" --query "Parameter.Value" --output text)
      #     echo "TF_VERSION=${TF_VERSION}" >> $GITHUB_ENV

      #     TF_DISTRIBUTION=$(aws ssm get-parameter --name "/aft/config/terraform/distribution" --query "Parameter.Value" --output text)
      #     echo "TF_DISTRIBUTION=${TF_DISTRIBUTION}" >> $GITHUB_ENV

      #     CT_MGMT_REGION=$(aws ssm get-parameter --name "/aft/config/ct-management-region" --query "Parameter.Value" --output text)
      #     echo "CT_MGMT_REGION=${CT_MGMT_REGION}" >> $GITHUB_ENV

      #     AFT_MGMT_ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
      #     echo "AFT_MGMT_ACCOUNT=${AFT_MGMT_ACCOUNT}" >> $GITHUB_ENV

      #     AFT_ADMIN_ROLE_NAME=$(aws ssm get-parameter --name /aft/resources/iam/aft-administrator-role-name | jq --raw-output ".Parameter.Value")
      #     echo "AFT_ADMIN_ROLE_NAME=${AFT_ADMIN_ROLE_NAME}" >> $GITHUB_ENV

      #     ROLE_SESSION_NAME=$(aws ssm get-parameter --name /aft/resources/iam/aft-session-name | jq --raw-output ".Parameter.Value")
      #     echo "ROLE_SESSION_NAME=${ROLE_SESSION_NAME}" >> $GITHUB_ENV

      # - name: Clone AWS AFT Core Framework
      #   run: |
      #     git clone -b ${{ env.AWS_MODULE_GIT_REF }} ${{ env.AWS_MODULE_SOURCE }} aws-aft-core-framework

      # - name: Setup SSH for Private Repos (if necessary)
      #   run: |
      #     ssh_key_parameter=$(aws ssm get-parameter --name /aft/config/aft-ssh-key --with-decryption 2> /dev/null || echo "None")
      #     if [[ $ssh_key_parameter != "None" ]]; then
      #       ssh_key=$(jq --raw-output ".Parameter.Value" <<< $ssh_key_parameter)
      #       mkdir -p ~/.ssh
      #       echo "Host *" >> ~/.ssh/config
      #       echo "StrictHostKeyChecking no" >> ~/.ssh/config
      #       echo "UserKnownHostsFile=/dev/null" >> ~/.ssh/config
      #       echo "$ssh_key" > ~/.ssh/ssh_key
      #       chmod 600 ~/.ssh/ssh_key
      #       eval "$(ssh-agent -s)"
      #       ssh-add ~/.ssh/ssh_key
      #     fi

      - name: Install Terraform
        run: |
          curl -o terraform_${{ env.TF_VERSION }}_linux_amd64.zip https://releases.hashicorp.com/terraform/${{ env.TF_VERSION }}/terraform_${{ env.TF_VERSION }}_linux_amd64.zip
          unzip -o terraform_${{ env.TF_VERSION }}_linux_amd64.zip && sudo mv terraform /usr/local/bin
          terraform -version
      # - name: Set up environment
      #   run: |
      #     export region="us-east-2"
      #     export tf_distribution_type="oss"  # or "cloud" based on your use case
      #     export kms_key_id="2a4793da-cc25-4f35-98c5-eb06d62088f4"
      #     export bucket="my-terraform-bucket"
      #     export key="path/to/terraform.tfstate"
      #     export dynamodb_table="terraform-lock-table"
      #     export kms_key_id="2a4793da-cc25-4f35-98c5-eb06d62088f4"
      #     export aft_admin_role_arn="arn:aws:iam::575108919022:role/AFT"          
      #     # export terraform_org_name="my-org"
      #    # export terraform_workspace_name="my-workspace"


      # - name: Process Jinja2 templates
      #   run: |
      #     cd ${GITHUB_WORKSPACE}/sandbox/terraform
      #     for f in *.jinja; do
      #       filename=$(basename "$f" .jinja)
      #       jinja2 "$f" -D region="us-east-2" \
      #                 -D bucket="my-terraform-bucket" \
      #                 -D key="path/to/terraform.tfstate" \
      #                 -D dynamodb_table="terraform-lock-table" \
      #                 -D kms_key_id="alias/my-kms-key" \
      #                 -D aft_admin_role_arn="arn:aws:iam::123456789012:role/MyAFTAdminRole" \
      #                 -D terraform_org_name="my-org" \
      #                 -D terraform_workspace_name="my-workspace" \
      #                 -D tf_distribution_type="oss" > "$filename.tf"
          # done

      - name: Run Terraform Init and Plan
        run: |
          cd ${GITHUB_WORKSPACE}/sandbox/terraform
          terraform init -input=false
          terraform plan -input=false -out=plan.tfout
